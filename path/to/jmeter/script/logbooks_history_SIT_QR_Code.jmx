<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB_conn_price_event_processor_owner" enabled="true">
        <stringProp name="dataSource">DB_conn_price_event_processor_owner</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${SERV_DB}:5432/price_event_processor_db</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="username">price_event_processor_owner</stringProp>
        <stringProp name="password">Ou!Pass</stringProp>
        <stringProp name="initQuery"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB_conn_promo_event_processor_owner" enabled="true">
        <stringProp name="dataSource">DB_conn_promo_event_processor_owner</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${SERV_DB}:5432/promo_event_processor_db</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="username">promo_event_processor_owner</stringProp>
        <stringProp name="password">Ou!PassPromo</stringProp>
        <stringProp name="initQuery"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB_conn_price_integrity_owner" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${SERV_DB}:5432/price_integrity_db</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Ou!Pass</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">price_integrity_owner</stringProp>
        <stringProp name="initQuery"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERV_CHECK" elementType="Argument">
            <stringProp name="Argument.name">SERV_CHECK</stringProp>
            <stringProp name="Argument.value">sit-api.morrisons.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERV_DB" elementType="Argument">
            <stringProp name="Argument.name">SERV_DB</stringProp>
            <stringProp name="Argument.value">172.29.33.40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERV_DATA" elementType="Argument">
            <stringProp name="Argument.name">SERV_DATA</stringProp>
            <stringProp name="Argument.value">sit-api.morrisons.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="login" elementType="Argument">
            <stringProp name="Argument.name">login</stringProp>
            <stringProp name="Argument.value">10165000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pass" elementType="Argument">
            <stringProp name="Argument.name">pass</stringProp>
            <stringProp name="Argument.value">123321</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storeid" elementType="Argument">
            <stringProp name="Argument.name">storeid</stringProp>
            <stringProp name="Argument.value">79</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source1" elementType="Argument">
            <stringProp name="Argument.name">source1</stringProp>
            <stringProp name="Argument.value">promo_start</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source2" elementType="Argument">
            <stringProp name="Argument.name">source2</stringProp>
            <stringProp name="Argument.value">promo_end</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source6" elementType="Argument">
            <stringProp name="Argument.name">source6</stringProp>
            <stringProp name="Argument.value">promo_end_mp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source3" elementType="Argument">
            <stringProp name="Argument.name">source3</stringProp>
            <stringProp name="Argument.value">price_increase</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source4" elementType="Argument">
            <stringProp name="Argument.name">source4</stringProp>
            <stringProp name="Argument.value">price_decrease</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source5" elementType="Argument">
            <stringProp name="Argument.name">source5</stringProp>
            <stringProp name="Argument.value">promo_start_mp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source9" elementType="Argument">
            <stringProp name="Argument.name">source9</stringProp>
            <stringProp name="Argument.value">price</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source7" elementType="Argument">
            <stringProp name="Argument.name">source7</stringProp>
            <stringProp name="Argument.value">promo_end_promo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source8" elementType="Argument">
            <stringProp name="Argument.name">source8</stringProp>
            <stringProp name="Argument.value">promo_end_mp_promo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apikey" elementType="Argument">
            <stringProp name="Argument.name">apikey</stringProp>
            <stringProp name="Argument.value">ZwQGsEN0f65kORZ8EVQlJWA2bGNbHls0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIT" elementType="Argument">
            <stringProp name="Argument.name">SIT</stringProp>
            <stringProp name="Argument.value">172.29.33.40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEV" elementType="Argument">
            <stringProp name="Argument.name">DEV</stringProp>
            <stringProp name="Argument.value">pi-dev.ccmwftgjvzsd.eu-central-1.rds.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AWS" elementType="Argument">
            <stringProp name="Argument.name">AWS</stringProp>
            <stringProp name="Argument.value">TestALB-322779530.eu-central-1.elb.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIT_serv" elementType="Argument">
            <stringProp name="Argument.name">SIT_serv</stringProp>
            <stringProp name="Argument.value">sit-api.morrisons.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timestamp" elementType="Argument">
            <stringProp name="Argument.name">timestamp</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMdd-HHmm,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="task_count" elementType="Argument">
            <stringProp name="Argument.name">task_count</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bff_apikey" elementType="Argument">
            <stringProp name="Argument.name">bff_apikey</stringProp>
            <stringProp name="Argument.value">2BXmbRlHm05TPVhnsq2GM1SGzanbhzOd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultsDir" elementType="Argument">
            <stringProp name="Argument.name">resultsDir</stringProp>
            <stringProp name="Argument.value">C:\jMeter\MRPI-POC\Dashboard_test_QR_Damian</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="product_file" elementType="Argument">
            <stringProp name="Argument.name">product_file</stringProp>
            <stringProp name="Argument.value">C:\jMeter\MRPI-POC\data\products_from_store_reg.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="servNoapigee" elementType="Argument">
            <stringProp name="Argument.name">servNoapigee</stringProp>
            <stringProp name="Argument.value">priceintegrity.sit.np.morconnect.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sts" elementType="Argument">
            <stringProp name="Argument.name">sts</stringProp>
            <stringProp name="Argument.value">${__P(sts,${__machineIP})}</stringProp>
            <stringProp name="Argument.desc">STS server is available on CRUX on jmeter master</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1486047718000</longProp>
        <longProp name="ThreadGroup.end_time">1486047718000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree setUp" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler page header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">String HTML;

HTML = &quot;&quot;&quot;&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
table, th, td {border: 1px solid black;}
table {counter-reset: item -1 ;}
tr.product:before {counter-increment: item; content: counter(item) &apos;. &apos; ;}
.prodImg1500 {width:200px; height:200px ;}
.barcodeMargin {margin: 20px ;}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table&gt;
&lt;tr class=&quot;product&quot;&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;th&gt;ProdID&lt;/th&gt;&lt;th&gt;MIN&lt;/th&gt;&lt;th&gt;Barcode&lt;/th&gt;&lt;th&gt;itemDescription&lt;/th&gt;&lt;th&gt;Label EAN8&lt;/th&gt;&lt;th&gt;Product EAN13&lt;/th&gt;&lt;th&gt;QR Code&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;productRegularPrice&lt;/th&gt;&lt;th&gt;promotions&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;customerFriendlyDescription&lt;/th&gt;&lt;th&gt;ProdImage&lt;/th&gt;&lt;th&gt;ImgLink&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;
&quot;&quot;&quot;;

props.put(&quot;HTML&quot;, HTML);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">String resultsPath;
String windowsResultsPath;

resultsPath = vars.get(&quot;resultsDir&quot;);
windowsResultsPath = resultsPath.replaceAll(&quot;/&quot;, &quot;\\\\&quot;);

vars.put(&quot;windowsResultsDir&quot;, windowsResultsPath);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="backup output dir" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">move</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${windowsResultsDir}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="${windowsResultsDir}" elementType="Argument">
                <stringProp name="Argument.name">${windowsResultsDir}</stringProp>
                <stringProp name="Argument.value">${windowsResultsDir}-backup</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="create output dir" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">mkdir</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${windowsResultsDir}\JSONresponses</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="create output dir" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">mkdir</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${windowsResultsDir}\JSONpromotions</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="create output dir" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">mkdir</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${windowsResultsDir}\smallImg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Logbook today" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1521806977000</longProp>
        <longProp name="ThreadGroup.end_time">1521806977000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="How many logbooks" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">logbook</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">5</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">task_count</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="If you want add task to history dashboards" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${task_count}</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${product_file}</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">store,MIN</stringProp>
            </CSVDataSet>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_user" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;provider&quot;: &quot;morrisons&quot;,&#xd;
    &quot;userName&quot;: &quot;${login}&quot;,&#xd;
    &quot;password&quot;: &quot;${pass}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERV_DATA}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/user/v1/login?apikey=${apikey}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Read_access_token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get data" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERV_DATA}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/priceintegrity/v1/locations/${storeid}/items/${MIN}??ondate=2017-09-12&amp;apikey=${apikey}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">name;bayNumber;pos;storeWalkSequence;aisle;shelfNumber;imageurl</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..itemDescription;$..bayNumber;$..position;$..storeWalkSequence;$..aisle;$..shelfNumber;$..url</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">null;1;1;1354354;1;1;1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Data_to_sql" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&apos;${aisle}&apos; != null)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">String graveAccent = &quot;\&apos;&quot;;

String aisle = vars.get(&quot;aisle&quot;);
String bayNumber = vars.get(&quot;bayNumber&quot;);
String pos = vars.get(&quot;pos&quot;);
String storeWalkSequence = vars.get(&quot;storeWalkSequence&quot;);
String name = vars.get(&quot;name&quot;);
String shelfNumber = vars.get(&quot;shelfNumber&quot;);
//String imageurl = vars.get(&quot;imageurl&quot;);

vars.put(&quot;aisle_2&quot;,aisle);
vars.put(&quot;bayNumber_2&quot;,bayNumber);
vars.put(&quot;pos_2&quot;,pos);
vars.put(&quot;storeWalkSequence_2&quot;,storeWalkSequence);
vars.put(&quot;name_2&quot;,name);
vars.put(&quot;shelfNumber_2&quot;,shelfNumber);

aisle = graveAccent+aisle+graveAccent;
bayNumber = graveAccent+bayNumber+graveAccent;
pos = graveAccent+pos+graveAccent;
storeWalkSequence = graveAccent+storeWalkSequence+graveAccent;
name = graveAccent+name+graveAccent;
shelfNumber = graveAccent+shelfNumber+graveAccent;
//imageurl = graveAccent+imageurl+graveAccent;


vars.put(&quot;aisle&quot;,aisle);
vars.put(&quot;bayNumber&quot;,bayNumber);
vars.put(&quot;pos&quot;,pos);
vars.put(&quot;storeWalkSequence&quot;,storeWalkSequence);
vars.put(&quot;name&quot;,name);
vars.put(&quot;shelfNumber&quot;,shelfNumber);
//vars.put(&quot;imageurl&quot;,imageurl);
</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert data to reference tables" enabled="false"/>
            <hashTree>
              <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert department" enabled="true">
                  <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                  <stringProp name="queryType">Callable Statement</stringProp>
                  <stringProp name="query">INSERT INTO tasks.department(
	 name, source_department_id, division, _group, store_id)
	VALUES (&apos;205 Wrap &amp; Accessories&apos;, 1, 1, 1, ${storeid});</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="department" enabled="true">
                  <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select max(department_id) from tasks.department</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">department_id</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Count Records</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">db_counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert location" enabled="true">
                <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">INSERT INTO tasks.location(
	aisle, bay, shelf, pos)
	VALUES (${aisle}, ${bayNumber}, ${shelfNumber}, ${pos});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="location" enabled="true">
                <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select 1 from tasks.location where aisle = ${aisle} and bay =  ${bayNumber} and shelf = ${shelfNumber} and pos = ${pos}
union
select max(location_id) from tasks.location
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">location_id</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Count Records</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert product" enabled="true">
                <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">INSERT INTO tasks.product(
	 productid, productdescription, productdescription_tsv, imageurl)
	VALUES (${MIN},${name} ,${name}, &apos;${imageurl}&apos;);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="product" enabled="true">
                <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select 1 from tasks.product where productid = &apos;${MIN}&apos;
union
select max(product_id) from tasks.product</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">product_id</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Count Records</stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Prepare to test" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get labels" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERV_DATA}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/priceintegrity/v1/locations/${storeid}/items/${MIN}??ondate=2017-09-12&amp;apikey=${apikey}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">legacyItemNumbers;EAN13</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..legacyItemNumbers;$..id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String legacyItemNumbers = vars.get(&quot;legacyItemNumbers&quot;);

legacyItemNumbers = legacyItemNumbers.replaceAll(&quot;\&quot;&quot;,&quot;&quot;);
legacyItemNumbers = legacyItemNumbers.replace(&apos;[&apos;,&apos;&apos;);
legacyItemNumbers = legacyItemNumbers.replace(&apos;]&apos;,&apos;&apos;)+&quot;4&quot;;

vars.put(&quot;legacyItemNumbers&quot;,legacyItemNumbers);

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.util.concurrent.ThreadLocalRandom;
import java.util.ArrayList;
import java.util.List;

//	String listexe=&quot;&quot;;
//	String listexe2 = &quot;&quot;;
	int itNumber = ThreadLocalRandom.current().nextInt(1, 23187451);
	vars.put(&quot;itNumber&quot;,String.valueOf(itNumber));
	int i = ThreadLocalRandom.current().nextInt(1, 3254325);
	vars.put(&quot;i&quot;,String.valueOf(i));
	int p = ThreadLocalRandom.current().nextInt(1, 2);
	vars.put(&quot;p&quot;,String.valueOf(p));
	int s = ThreadLocalRandom.current().nextInt(1, 8);
	vars.put(&quot;s&quot;,String.valueOf(s));
	int e = ThreadLocalRandom.current().nextInt(1, 12);
	vars.put(&quot;e&quot;,String.valueOf(e));

	//for(int e=1;e&lt;12;e++){
	if(p==1){
	if(e==5||e==1){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:5,\&quot;userNote\&quot;:\&quot;Inc Desc\&quot;}&quot;);
		vars.put(&quot;e&quot;,&quot;5&quot;);
	}
	else if(e==6||e==2){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:6,\&quot;userNote\&quot;:\&quot;Inc Price\&quot;}&quot;);
		vars.put(&quot;e&quot;,&quot;6&quot;);
	}
	else if(e==7||e==3){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:7,\&quot;userNote\&quot;:\&quot;Inc Promo\&quot;}&quot;);
		vars.put(&quot;e&quot;,&quot;7&quot;);
	}
	else if(e==8||e==4){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:8,\&quot;userNote\&quot;:\&quot;Flash Mar\&quot;}&quot;);
		vars.put(&quot;e&quot;,&quot;8&quot;);
	}
	else if(e==9){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:9,\&quot;userNote\&quot;:\&quot;Not As Ad\&quot;}&quot;);
	}
	else if(e==10){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:10,\&quot;userNote\&quot;:\&quot;Inc UP\&quot;}&quot;);
	}
	else if(e==11){
		vars.put(&quot;exe2&quot;,&quot;{\&quot;actionNumber\&quot;:14,\&quot;id\&quot;:11,\&quot;userNote\&quot;:\&quot;Otherr\&quot;}&quot;);
	}
	else{
		vars.put(&quot;exe2&quot;,&quot;&quot;);
	}
	}
	else if(p==2){
		if(e&lt;4){
			vars.put(&quot;exe&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:5,\&quot;userNote\&quot;:\&quot;Flash Mar\&quot;}&quot;);
			vars.put(&quot;e&quot;,&quot;5&quot;);
		}
		else if(e&lt;8){
			vars.put(&quot;exe&quot;,&quot;{\&quot;actionNumber\&quot;:6,\&quot;id\&quot;:9,\&quot;userNote\&quot;:\&quot;Inc UP\&quot;}&quot;);
			vars.put(&quot;e&quot;,&quot;9&quot;);
		}
		else {
			vars.put(&quot;exe&quot;,&quot;{\&quot;actionNumber\&quot;:14,\&quot;id\&quot;:11,\&quot;userNote\&quot;:\&quot;Other\&quot;}&quot;);
			vars.put(&quot;e&quot;,&quot;11&quot;);
		}	
	}
	
	//listexe = listexe +&quot;,&quot;+ exe;
	//listexe2 = listexe2+&quot;,&quot;+ exe2;
	//}

//	vars.put(&quot;listexe&quot;,String.valueOf(listexe));
//	vars.put(&quot;listexe2&quot;,String.valueOf(listexe2));

 	ArrayList randomList = new ArrayList();
	    randomList.add(&quot;152&quot;);
	    randomList.add(&quot;35&quot;);
	    randomList.add(&quot;49&quot;);
	int x = ThreadLocalRandom.current().nextInt(0, 3);
        vars.put(&quot;stores_count&quot;,randomList.get(x));


	    
//	all stores	
//	int z = Integer.parseInt(vars.get(&quot;iteration&quot;));
//	int stores_count = ThreadLocalRandom.current().nextInt(1, z);
//	vars.put(&quot;stores_count&quot;,String.valueOf(stores_count));


//	long labelProduct = ThreadLocalRandom.current().nextLong(9999999, 100000000);
//	vars.put(&quot;labelProduct&quot;,String.valueOf(labelProduct));
//	long labelPrice = ThreadLocalRandom.current().nextLong(999999999999, 10000000000000);
//	vars.put(&quot;labelPrice&quot;,String.valueOf(labelPrice));
	</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Daily Workload dashboard" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Data to page" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="170071582">Test Fragment</stringProp>
                  <stringProp name="149335742">Data to page</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Task Creation" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">7</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">8</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">coun</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">0</stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">days</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo start" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==1</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;80&quot;);
vars.put(&quot;source_check&quot;,&quot;starting_offers&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-337013187">Insert Task Promo Start</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START - Insert Task BC" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="-337013187">Insert Task Promo Start</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==2</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;30&quot;);
vars.put(&quot;source_check&quot;,&quot;ending_offers&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="1796281718">Insert Task Promo End</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END - Insert Task BC" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="1796281718">Insert Task Promo End</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end mp" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==6</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;ending_offers&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="2031153293">Insert Task Promo End MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Insert Task BC" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="2031153293">Insert Task Promo End MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo start mp" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==5</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;90&quot;);
vars.put(&quot;source_check&quot;,&quot;starting_offers_more_points&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="1673717350">Insert Task Promo Start MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="1673717350">Insert Task Promo Start MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START MP - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Price inc" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==3</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;15&quot;);
vars.put(&quot;source_check&quot;,&quot;price_increases&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE INC - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-1862380659">Insert Task Price Increase</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE INC - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="-1862380659">Insert Task Price Increase</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE INC - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Price dec" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==4</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;50&quot;);
vars.put(&quot;source_check&quot;,&quot;price_decreases&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE DEC - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-1384096279">Insert Task Price Decrease</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE DEC - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="-1384096279">Insert Task Price Decrease</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE DEC - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end promo" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==7</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;60&quot;);
vars.put(&quot;source_check&quot;,&quot;promo_end_promo&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END PROMO - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-1702587963">Insert Task Promo End Promo</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END PROMO - Insert Task BC" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="-1702587963">Insert Task Promo End Promo</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END PROMO - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end mp promo" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==8</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;70&quot;);
vars.put(&quot;source_check&quot;,&quot;promo_end_more_points_promo&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP PROMO - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="1765793246">Insert Task Promo End Promo MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP PROMO - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="319199829">Insert Task BC</stringProp>
                      <stringProp name="1765793246">Insert Task Promo End Promo MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP PROMO - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Full dashboard" enabled="false"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Data to page" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="170071582">Test Fragment</stringProp>
                  <stringProp name="149335742">Data to page</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Task Creation" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">7</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">9</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">coun</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">0</stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">days</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo start" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==1</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;starting_offers&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-337013187">Insert Task Promo Start</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==2</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;ending_offers&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="1796281718">Insert Task Promo End</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Price inc" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==4</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;price_increases&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE INC - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-1862380659">Insert Task Price Increase</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE INC - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Price dec" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==5</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;price_decreases&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE DEC - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-1384096279">Insert Task Price Decrease</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PRICE DEC - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo start mp" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==6</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;starting_offers_more_points&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="1673717350">Insert Task Promo Start MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO START MP - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end mp" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==7</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;ending_offers&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="2031153293">Insert Task Promo End MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end mp promo" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==9</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;promo_end_more_points_promo&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="1765793246">Insert Task Promo End Promo MP</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Promo end promo" enabled="true">
                  <stringProp name="IfController.condition">${coun} ==8</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">vars.put(&quot;throughput&quot;,&quot;100&quot;);
vars.put(&quot;source_check&quot;,&quot;promo_end_promo&quot;);</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Insert Task" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="-1702587963">Insert Task Promo End Promo</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PROMO END MP - Make check" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="170071582">Test Fragment</stringProp>
                      <stringProp name="775368822">Make check</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add logbook" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logbook triger" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;type&quot;: &quot;AuditLabelCheckCreation&quot;&#xd;
} </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${servNoapigee}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">priceintegrity/v1/hooks</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">update audit.audit set startdatetime = startdatetime - interval &apos;1 day&apos;, enddatetime = enddatetime - interval &apos;1 day&apos; where process_id = 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query - check sunday" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select EXTRACT(ISODOW FROM current_date-${logbook}) IN (7)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">sunday</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OLD logbook" enabled="true"/>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Version of logbook" enabled="false">
                <stringProp name="variableName">version</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <stringProp name="minimumValue">2</stringProp>
                <stringProp name="maximumValue">2</stringProp>
                <stringProp name="randomSeed"></stringProp>
                <boolProp name="perThread">false</boolProp>
              </RandomVariableConfig>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query - DW logbooks" enabled="false">
                <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">insert into audit.audit ( process_id, startdatetime, enddatetime, storeid,version) values 
( 1, (SELECT interval &apos;22:00:00&apos; + (current_date-${logbook}) AT TIME ZONE &apos;UTC&apos;), (SELECT interval &apos;21:59:59&apos; + (current_date+1-${logbook}) AT TIME ZONE &apos;UTC&apos;), ${storeid}, ${version})</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add price accuracy DW" enabled="false"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Price Accuracy" enabled="true">
                  <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                  <stringProp name="queryType">Callable Statement</stringProp>
                  <stringProp name="query">insert into audit.priceaccuracy (audit_id,signofflevel_id)
values 
((select max(audit_id) from audit.audit),1),
((select max(audit_id) from audit.audit),2)</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Price Accuracy - Questions" enabled="true">
                  <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                  <stringProp name="queryType">Callable Statement</stringProp>
                  <stringProp name="query">insert into audit.question (priceaccuracy_id,questionlabel_id)
values 
((select max(priceaccuracy_id) from audit.priceaccuracy),1),
((select max(priceaccuracy_id) from audit.priceaccuracy),2),
((select max(priceaccuracy_id) from audit.priceaccuracy),3),
((select max(priceaccuracy_id) from audit.priceaccuracy),4),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),1),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),2),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),3),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),4)</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OLD logbook" enabled="true"/>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Version of logbook" enabled="false">
                  <stringProp name="variableName">version</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">2</stringProp>
                  <stringProp name="maximumValue">2</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query - DW logbooks" enabled="false">
                  <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                  <stringProp name="queryType">Callable Statement</stringProp>
                  <stringProp name="query">insert into audit.audit ( process_id, startdatetime, enddatetime, storeid,version) values 
( 1, (SELECT interval &apos;22:00:00&apos; + (current_date-${logbook}) AT TIME ZONE &apos;UTC&apos;), (SELECT interval &apos;21:59:59&apos; + (current_date+1-${logbook}) AT TIME ZONE &apos;UTC&apos;), ${storeid}, ${version})</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add price accuracy DW" enabled="false"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Price Accuracy" enabled="true">
                    <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                    <stringProp name="queryType">Callable Statement</stringProp>
                    <stringProp name="query">insert into audit.priceaccuracy (audit_id,signofflevel_id)
values 
((select max(audit_id) from audit.audit),1),
((select max(audit_id) from audit.audit),2)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Price Accuracy - Questions" enabled="true">
                    <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                    <stringProp name="queryType">Callable Statement</stringProp>
                    <stringProp name="query">insert into audit.question (priceaccuracy_id,questionlabel_id)
values 
((select max(priceaccuracy_id) from audit.priceaccuracy),1),
((select max(priceaccuracy_id) from audit.priceaccuracy),2),
((select max(priceaccuracy_id) from audit.priceaccuracy),3),
((select max(priceaccuracy_id) from audit.priceaccuracy),4),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),1),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),2),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),3),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),4)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If sunday make Price Verification" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&apos;${sunday_1}&apos; == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="OLD logbook PV" enabled="true"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query - PV logbooks" enabled="false">
                  <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                  <stringProp name="queryType">Callable Statement</stringProp>
                  <stringProp name="query">insert into audit.audit ( process_id, startdatetime, enddatetime, storeid, version) values 
( 2, (SELECT interval &apos;03:00:00&apos; + (current_date+1-${logbook}) AT TIME ZONE &apos;UTC&apos;), (SELECT interval &apos;02:59:59&apos; + (current_date+8-${logbook}) AT TIME ZONE &apos;UTC&apos;), ${storeid}, ${version})</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add price accuracy PV" enabled="false"/>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Price Accuracy" enabled="true">
                    <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                    <stringProp name="queryType">Callable Statement</stringProp>
                    <stringProp name="query">insert into audit.priceaccuracy (audit_id,signofflevel_id)
values 
((select max(audit_id) from audit.audit),1),
((select max(audit_id) from audit.audit),2)</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Price Accuracy - Questions" enabled="true">
                    <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                    <stringProp name="queryType">Callable Statement</stringProp>
                    <stringProp name="query">insert into audit.question (priceaccuracy_id,questionlabel_id)
values 
((select max(priceaccuracy_id) from audit.priceaccuracy),5),
((select max(priceaccuracy_id)-1 from audit.priceaccuracy),5)
</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
                <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">update audit.audit set startdatetime = startdatetime - interval &apos;7 days&apos;, enddatetime = enddatetime - interval &apos;7 days&apos; where process_id = 2</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logbook triger" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;type&quot;: &quot;AuditVerificationCreation&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${servNoapigee}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">priceintegrity/v1/hooks</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Sunday" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query - correction start date" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">update audit.audit set startdatetime = startdatetime-interval &apos;03:00:00&apos; where audit_id in 
(SELECT audit_id
  FROM audit.audit
 WHERE process_id = 1
  and date_part(&apos;hour&apos;, startdatetime) = 20
 and EXTRACT(ISODOW FROM startdatetime) IN (7))</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query - correction end date" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">update audit.audit set enddatetime = enddatetime-interval &apos;03:00:00&apos; where audit_id in 
(SELECT audit_id
  FROM audit.audit
 WHERE process_id = 1
  and date_part(&apos;hour&apos;, enddatetime) = 19
 and EXTRACT(ISODOW FROM enddatetime) IN (7))</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="To clean all logbooks" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">delete from audit.question where priceaccuracy_id in (select priceaccuracy_id from audit.priceaccuracy where audit_id &gt; 0);

delete from audit.priceaccuracy where audit_id &gt; 0;

delete from audit.audit where audit_id &gt; 0;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524826533000</longProp>
        <longProp name="ThreadGroup.end_time">1524826533000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler page footer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">String HTML;

HTML = props.get(&apos;HTML&apos;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;

props.put(&quot;HTML&quot;, HTML);
vars.put(&quot;HTML&quot;, HTML);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${HTML}</stringProp>
          <stringProp name="RESPONSE_TIME">1</stringProp>
          <stringProp name="LATENCY">1</stringProp>
          <stringProp name="CONNECT">1</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file HTML" enabled="true">
            <stringProp name="FileSaver.filename">${resultsDir}/36.html</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">true</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select *
  FROM tasks.change_label_task_view
  where effectivedate = current_date</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
          <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">delete
  FROM tasks.change_label_task_view
  where effectivedate = current_date</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Data to page" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="request ${MIN}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="apikey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2BXmbRlHm05TPVhnsq2GM1SGzanbhzOd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apikey</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SERV_DATA}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/priceintegrity/v1/locations/${storeid}/items/${MIN}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic MkJYbWJSbEhtMDVUUFZobnNxMkdNMVNHemFuYmh6T2Q6TElMTDJyYzBzdURSdmxBcA==</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">productRegularPrice;amount;customerFriendlyDescription;itemDescription;imageUrl;ProdID;Barcode;Space</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..prices;$..amount;$..customerFriendlyDescription;$..itemDescription;$..imageUrl..url;$..legacyItemNumbers[0];$..gtins[0]..id;$..space</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">regPriceNotFound;amountNotFound;custDescNotFound;itemDescriptionNotFound;imageUrlNotFound;lpnNotFound;BarcodeNotFound;SpaceNotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor promotion" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">promotions</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..promotions</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">promotionNotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${resultsDir}/JSONresponses/${MIN}.json</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="get promotions" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">${promotions}</stringProp>
            <stringProp name="RESPONSE_TIME">1</stringProp>
            <stringProp name="LATENCY">1</stringProp>
            <stringProp name="CONNECT">1</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file HTML" enabled="true">
              <stringProp name="FileSaver.filename">${resultsDir}/JSONpromotions/promotions-${MIN}.json</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="generate page content" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String HTML;
//&lt;tr&gt;&lt;th&gt;ProdID&lt;/th&gt;&lt;th&gt;MIN&lt;/th&gt;&lt;th&gt;Barcode&lt;/th&gt;&lt;th&gt;itemDescription&lt;/th&gt;&lt;th&gt;Label EAN8&lt;/th&gt;&lt;th&gt;Product EAN13&lt;/th&gt;&lt;th&gt;QR code&lt;/th&gt;&lt;/tr&gt;
//&lt;tr&gt;&lt;th&gt;productRegularPrice&lt;/th&gt;&lt;th&gt;promotions&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;customerFriendlyDescription&lt;/th&gt;&lt;th&gt;ProdImage&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;

HTML = props.get(&apos;HTML&apos;) + &quot;&quot;&quot;\r
&lt;tr class=&quot;product&quot;&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;ProdID&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;MIN&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;Barcode&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;itemDescription&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&lt;img class=&quot;barcodeMargin&quot; src=&apos;&quot;&quot;&quot; + vars.get(&apos;Barcode&apos;) + &quot;&quot;&quot;label-4j.png&apos; /&gt;&lt;/td&gt;
  &lt;td&gt;&lt;img class=&quot;barcodeMargin&quot; src=&apos;&quot;&quot;&quot; + vars.get(&apos;Barcode&apos;) + &quot;&quot;&quot;product-4j.png&apos; /&gt;&lt;/td&gt;
  &lt;td&gt;&lt;img class=&quot;barcodeMargin&quot; src=&apos;&quot;&quot;&quot; + vars.get(&apos;Barcode&apos;) + &quot;&quot;&quot;QR-4j.png&apos; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;productRegularPrice&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;promotions&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;Space&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&quot;&quot;&quot; + vars.get(&apos;customerFriendlyDescription&apos;) + &quot;&quot;&quot;&lt;/td&gt;
  &lt;td&gt;&lt;img src=&apos;&quot;&quot;&quot; + vars.get(&apos;Barcode&apos;) + &quot;&quot;&quot;image-small.jpg&apos;/&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href=&apos;&quot;&quot;&quot; + vars.get(&apos;imageUrl&apos;) + &quot;&quot;&quot;&apos; &gt;img link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tr&gt;
&quot;&quot;&quot;;

props.put(&quot;HTML&quot;, HTML);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get product ean13 barcode4j" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.krysalis.barcode4j.*;
import org.krysalis.barcode4j.impl.*;
import org.krysalis.barcode4j.impl.code128.Code128Bean;
import org.krysalis.barcode4j.impl.code39.Code39Bean;
import org.krysalis.barcode4j.impl.upcean.EAN13Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import org.krysalis.barcode4j.tools.UnitConv;

String productNumber = vars.get(&quot;Barcode&quot;);
//${resultsDir}/${Barcode}product.png
String resultsDir = vars.get(&quot;resultsDir&quot;);
String fileName = productNumber + &quot;product-4j.png&quot;;
File outputFile = new File(resultsDir + &quot;/&quot; + fileName);

//Code128Bean bean = new Code128Bean();
EAN13Bean bean = new EAN13Bean();
final int dpi = 320;

//Configure the barcode generator
bean.setModuleWidth(UnitConv.in2mm(2.8f / dpi));

bean.doQuietZone(false);
bean.setHeight(20);

//Open output file
//File outputFile = new File(barCodePath + fileName + &quot;.JPG&quot;);

FileOutputStream out = new FileOutputStream(outputFile);
    
BitmapCanvasProvider canvas = new BitmapCanvasProvider(
   out, &quot;image/x-png&quot;, dpi, BufferedImage.TYPE_BYTE_BINARY, false, 0);

//Generate the barcode
bean.generateBarcode(canvas, productNumber.substring(0,12)); //--remove last control digit;
   
//Signal end of generation
canvas.finish();
    
System.out.println(&quot;Bar Code is generated successfully&quot;);

      


</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get product ean8 barcode4j" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.krysalis.barcode4j.*;
import org.krysalis.barcode4j.impl.*;
import org.krysalis.barcode4j.impl.code128.Code128Bean;
import org.krysalis.barcode4j.impl.code39.Code39Bean;
import org.krysalis.barcode4j.impl.upcean.EAN13Bean;
import org.krysalis.barcode4j.impl.upcean.EAN8Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import org.krysalis.barcode4j.tools.UnitConv;

String productNumber = vars.get(&quot;Barcode&quot;);
String labelNumber = vars.get(&quot;ProdID&quot;);
//${resultsDir}/${Barcode}product.png
String resultsDir = vars.get(&quot;resultsDir&quot;);
String fileName = productNumber + &quot;label-4j.png&quot;;
File outputFile = new File(resultsDir + &quot;/&quot; + fileName);

EAN8Bean bean = new EAN8Bean();
final int dpi = 320;

//Configure the barcode generator
bean.setModuleWidth(UnitConv.in2mm(2.8f / dpi));

bean.doQuietZone(false);
bean.setHeight(20);

//Open output file
//File outputFile = new File(barCodePath + fileName + &quot;.JPG&quot;);

FileOutputStream out = new FileOutputStream(outputFile);
    
BitmapCanvasProvider canvas = new BitmapCanvasProvider(
   out, &quot;image/x-png&quot;, dpi, BufferedImage.TYPE_BYTE_BINARY, false, 0);

//Generate the barcode
bean.generateBarcode(canvas, labelNumber);
   
//Signal end of generation
canvas.finish();
    
System.out.println(&quot;Bar Code is generated successfully&quot;);

      


</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get product QR code" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

	
	String text = vars.get(&quot;MIN&quot;);
	String filePath = vars.get(&quot;resultsDir&quot;);
	String productNumber = vars.get(&quot;Barcode&quot;);
	String fileName = productNumber + &quot;QR-4j.png&quot;;
	File outputFile = new File(filePath + &quot;/&quot; + fileName);
	int width = 200;
	int height = 200;
	

        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);

		
        MatrixToImageWriter.writeToFile(bitMatrix, &quot;PNG&quot;,outputFile);


</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get product QR code" enabled="false">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

String productNumber = vars.get(&quot;Barcode&quot;);
String labelNumber = vars.get(&quot;ProdID&quot;);
String filePath = vars.get(&quot;resultsDir&quot;);
String fileName = productNumber + &quot;QR-4j.png&quot;;
File outputFile = new File(resultsDir + &quot;/&quot; + fileName);
String fileType = &quot;png&quot;;
int width = 200;
int height = 200;


public class QRCodeGenerator {
	throws WriterException, IOException {
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(labelNumber, BarcodeFormat.QR_CODE, width, height);

        Path path = FileSystems.getDefault().getPath(outputFile);
        //vars.put(&quot;path&quot;,path);
        MatrixToImageWriter.writeToPath(bitMatrix, &quot;PNG&quot;, outputFile);
	}

	
    public static void main(String[] args) {
        try {
            generateQRCodeImage(&quot;This is my first QR Code&quot;, 350, 350, QR_CODE_IMAGE_PATH);
        } catch (WriterException e) {
            System.out.println(&quot;Could not generate QR Code, WriterException :: &quot; + e.getMessage());
        } catch (IOException e) {
            System.out.println(&quot;Could not generate QR Code, IOException :: &quot; + e.getMessage());
        }
    }

}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get product image" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${imageUrl}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,image/*,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36 OPR/43.0.2442.1144</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${resultsDir}/${Barcode}image.jpg</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">true</boolProp>
              <boolProp name="FileSaver.successonly">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Make check" enabled="true"/>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${throughput}</stringProp>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DW check" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;groupId&quot;: &quot;${source_check}&quot;,&#xd;
  &quot;creationDate&quot;: &quot;2019-01-16T08:00:14+01:00&quot;,&#xd;
  &quot;departmentClass&quot;: &quot;Baby Care&quot;,&#xd;
  &quot;departmentName&quot;: &quot;089 Baby Care&quot;,&#xd;
  &quot;imageUrl&quot;: &quot;https://s3-eu-west-1.amazonaws.com/mprod.xxwmm.retail.brandbank.zzzzzzzzzz/images/brandbank/8001090156839_0.jpg&quot;,&#xd;
  &quot;departmentLocation&quot;: false,&#xd;
  &quot;issues&quot;: [&#xd;
    &#xd;
  ],&#xd;
  &quot;labelBarcode&quot;: &quot;${legacyItemNumbers}&quot;,&#xd;
  &quot;productBarcode&quot;:&quot;${EAN13}&quot;,&#xd;
    &quot;availableLocations&quot;: {&#xd;
    &quot;standard&quot;: {&#xd;
      &quot;endDate&quot;: &quot;31/12/4000&quot;,&#xd;
      &quot;locations&quot;: [&#xd;
        {&#xd;
          &quot;aisle&quot;: &quot;${aisle_2}&quot;,&#xd;
          &quot;bayNumber&quot;: &quot;${bayNumber_2}&quot;,&#xd;
          &quot;planName&quot;: &quot;Nappies&quot;,&#xd;
          &quot;position&quot;: &quot;${pos_2}&quot;,&#xd;
          &quot;shelfNumber&quot;: &quot;${shelfNumber_2}&quot;,&#xd;
          &quot;selected&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;startDate&quot;: &quot;27/03/2017&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;min&quot;: &quot;${MIN}&quot;,&#xd;
  &quot;prices&quot;: [&#xd;
    {&#xd;
      &quot;effectiveDate&quot;: &quot;2017-09-15&quot;,&#xd;
      &quot;MIN&quot;: &quot;${MIN}&quot;,&#xd;
      &quot;regularPrice&quot;: &quot;12&quot;,&#xd;
      &quot;sellingUEP&quot;: &quot;14p per each&quot;,&#xd;
      &quot;sellingUnitOfMeasure&quot;: &quot;EA&quot;&#xd;
    }&#xd;
  ],&#xd;
    &quot;productName&quot;: &quot;${name}&quot;,&#xd;
      &quot;promotions&quot;: [&#xd;
    {&#xd;
      &quot;amount&quot;: &quot;9&quot;,&#xd;
      &quot;name&quot;: &quot;${name}&quot;,&#xd;
      &quot;offerValue&quot;: null,&#xd;
      &quot;theme1&quot;: &quot;Themed&quot;,&#xd;
      &quot;theme2&quot;: &quot;Price Crunch&quot;,&#xd;
      &quot;type&quot;: &quot;FixedPriceSimple&quot;,&#xd;
      &quot;unitEquivalentPrice&quot;: &quot;10.5p per each&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;storeId&quot;: &quot;${storeid}&quot;,    &#xd;
  &quot;subProcessType&quot;: &quot;DAILY_WORKLOAD&quot;,    &#xd;
  &quot;userId&quot;: &quot;10165000&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERV_CHECK}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/priceintegrity/v1/checks?apikey=${bff_apikey}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic MkJYbWJSbEhtMDVUUFZobnNxMkdNMVNHemFuYmh6T2Q6TElMTDJyYzBzdURSdmxBcA==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">idKibanaDW</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="exceptions" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;groupId&quot;: &quot;${source_check}&quot;,&#xd;
  &quot;creationDate&quot;: &quot;2019-01-16T08:00:14+01:00&quot;,&#xd;
  &quot;departmentClass&quot;: &quot;Seasonal Cards&quot;,&#xd;
  &quot;departmentLocation&quot;: false,&#xd;
  &quot;departmentName&quot;: &quot;203 Greeting Cards&quot;,&#xd;
  &quot;imageUrl&quot;:&quot;https://s3-eu-west-1.amazonaws.com/mprod.xxwmm.retail.brandbank.zzzzzzzzzz/images/brandbank/8001090156839_0.jpg&quot;,&#xd;
  &quot;issues&quot;: [&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 0,&#xd;
      &quot;type&quot;: 2&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 0,&#xd;
      &quot;type&quot;: 1&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 1,&#xd;
      &quot;type&quot;: 4&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 6,&#xd;
      &quot;type&quot;: 6,&#xd;
      &quot;userNote&quot;: &quot;kkk&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 6,&#xd;
      &quot;type&quot;: 7,&#xd;
      &quot;userNote&quot;: &quot;kkk&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 6,&#xd;
      &quot;type&quot;: 8,&#xd;
      &quot;userNote&quot;: &quot;kkk&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 6,&#xd;
      &quot;type&quot;: 9,&#xd;
      &quot;userNote&quot;: &quot;kkk&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 6,&#xd;
      &quot;type&quot;: 5,&#xd;
      &quot;userNote&quot;: &quot;kkk&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;actionNumber&quot;: 14,&#xd;
      &quot;type&quot;: 11,&#xd;
      &quot;userNote&quot;: &quot;kkk&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;labelBarcode&quot;: &quot;${legacyItemNumbers}&quot;,&#xd;
  &quot;availableLocations&quot;: {&#xd;
    &quot;standard&quot;: {&#xd;
      &quot;endDate&quot;: &quot;31/12/4000&quot;,&#xd;
      &quot;locations&quot;: [&#xd;
        {&#xd;
          &quot;aisle&quot;: &quot;${aisle}&quot;,&#xd;
          &quot;bayNumber&quot;: &quot;${bayNumber}&quot;,&#xd;
          &quot;planClass&quot;: 1399,&#xd;
          &quot;planName&quot;: &quot;PL-Greeting Cards&quot;,&#xd;
          &quot;position&quot;: &quot;${pos}&quot;,&#xd;
          &quot;selected&quot;: true,&#xd;
          &quot;shelfNumber&quot;: &quot;${shelfNumber}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;startDate&quot;: &quot;22/07/2016&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;min&quot;: &quot;${MIN}&quot;,&#xd;
  &quot;prices&quot;: [&#xd;
    {&#xd;
      &quot;effectiveDate&quot;: &quot;2014-02-18&quot;,&#xd;
      &quot;MIN&quot;: &quot;${MIN}&quot;,&#xd;
      &quot;regularPrice&quot;: &quot;2&quot;,&#xd;
      &quot;sellingUnitOfMeasure&quot;: &quot;EA&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;productName&quot;: &quot;${name}&quot;,&#xd;
  &quot;promotions&quot;: [&#xd;
    {&quot;amount&quot;:&quot;9&quot;,&quot;endDate&quot;:&quot;2019-05-15T23:59:59&quot;,&quot;name&quot;:&quot;${name}&quot;,&quot;startDate&quot;:&quot;2018-02-15T00:00:00&quot;,&quot;theme1&quot;:&quot;Themed&quot;,&quot;theme2&quot;:&quot;Price Crunch&quot;,&quot;type&quot;:&quot;FixedPriceSimple&quot;,&quot;unitEquivalentPrice&quot;:&quot;10.5p per each&quot;}&#xd;
  ],&#xd;
  &quot;storeId&quot;: &quot;${storeid}&quot;,&#xd;
  &quot;subProcessType&quot;: &quot;DAILY_WORKLOAD&quot;,&#xd;
  &quot;userId&quot;: &quot;10165000&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERV_CHECK}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/priceintegrity/v1/checks?apikey=${bff_apikey}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic MkJYbWJSbEhtMDVUUFZobnNxMkdNMVNHemFuYmh6T2Q6TElMTDJyYzBzdURSdmxBcA==</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">idKibanaDW</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo Start" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_promo_start(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_promo_end(
	 created,
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End MP" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_promo_end_mp(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo Start MP" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_promo_start_mp(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Price Increase" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_price_increase(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Price Decrease" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_price_decrease(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End Promo" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_promo_end_promo(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End Promo MP" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
            <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">INSERT INTO tasks.task_promo_end_mp_promo(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 false,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task BC" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo Start" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_promo_start(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_promo_end(
	 created,
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End MP" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_promo_end_mp(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo Start MP" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_promo_start_mp(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Price Increase" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_price_increase(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Price Decrease" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_price_decrease(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End Promo" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_promo_end_promo(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert Task Promo End Promo MP" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB_conn_price_integrity_owner</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">INSERT INTO tasks.task_promo_end_mp_promo(
	 created, 
	 effectivetime, 
	 businesscritical, 
	 finished, 
	 storeid, 
	 storewalksequence, 
	 changesourceelementid, 
	 product_id, 
	 source_id, 
	 location_id, 
	 department_id, 
	 label_check_id, 
	 planclass_id, 
	 overduedate, 
	 supress_redundant_task, 
	 offer_mechanism_id, 
	 offer_description_id)
VALUES (
	 current_date,
	 current_date+2-${logbook}+interval &apos;2 hours&apos;,
	 true,
	 null,
	 ${storeid},
	 ${storeWalkSequence},
	 null,
	 tasks.get_product(&apos;${MIN}&apos;, ${name}, &apos;${imageurl}&apos;),
	 ${coun},
	 --&apos;${__V(source${coun})}&apos;,
	 tasks.get_location(${aisle}, ${bayNumber}, ${shelfNumber}, ${pos}),
	 tasks.get_department(&apos;205 Wrap &amp; Accessories&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, ${storeid}),
	 null,
	 null,
	 current_date + 3-${logbook}+interval &apos;7 hours&apos;,
	 null,
	 null,
	 null)
	 
	</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="graphiteMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="graphiteHost" elementType="Argument">
              <stringProp name="Argument.name">graphiteHost</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="graphitePort" elementType="Argument">
              <stringProp name="Argument.name">graphitePort</stringProp>
              <stringProp name="Argument.value">2003</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rootMetricsPrefix" elementType="Argument">
              <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
              <stringProp name="Argument.value">jmeter.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersList" elementType="Argument">
              <stringProp name="Argument.name">samplersList</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="liveMetrics" elementType="Argument">
              <stringProp name="Argument.name">liveMetrics</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instrumentationKey" elementType="Argument">
              <stringProp name="Argument.name">instrumentationKey</stringProp>
              <stringProp name="Argument.value">fbef6901-fe7d-45c4-8f7a-86f7f9d32c9e</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testName" elementType="Argument">
              <stringProp name="Argument.name">testName</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
